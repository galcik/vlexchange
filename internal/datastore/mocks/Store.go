// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	currency "github.com/galcik/vlexchange/internal/currency"
	datastore "github.com/galcik/vlexchange/internal/datastore"

	mock "github.com/stretchr/testify/mock"

	queries "github.com/galcik/vlexchange/internal/datastore/queries"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

// CreateStandingOrder provides a mock function with given fields: params
func (_m *Store) CreateStandingOrder(params datastore.CreateStandingOrderParams) (*queries.StandingOrder, []int32, error) {
	ret := _m.Called(params)

	var r0 *queries.StandingOrder
	if rf, ok := ret.Get(0).(func(datastore.CreateStandingOrderParams) *queries.StandingOrder); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*queries.StandingOrder)
		}
	}

	var r1 []int32
	if rf, ok := ret.Get(1).(func(datastore.CreateStandingOrderParams) []int32); ok {
		r1 = rf(params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]int32)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(datastore.CreateStandingOrderParams) error); ok {
		r2 = rf(params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// DeleteStandingOrder provides a mock function with given fields: orderId
func (_m *Store) DeleteStandingOrder(orderId int32) error {
	ret := _m.Called(orderId)

	var r0 error
	if rf, ok := ret.Get(0).(func(int32) error); ok {
		r0 = rf(orderId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DepositAccount provides a mock function with given fields: accountId, btcAmount, usdAmount
func (_m *Store) DepositAccount(accountId int32, btcAmount currency.BTC, usdAmount currency.USD) (bool, error) {
	ret := _m.Called(accountId, btcAmount, usdAmount)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int32, currency.BTC, currency.USD) bool); ok {
		r0 = rf(accountId, btcAmount, usdAmount)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32, currency.BTC, currency.USD) error); ok {
		r1 = rf(accountId, btcAmount, usdAmount)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExecuteMarketOrder provides a mock function with given fields: params
func (_m *Store) ExecuteMarketOrder(params datastore.CreateMarketOrderParams) (datastore.CreateMarketOrderResult, []int32, error) {
	ret := _m.Called(params)

	var r0 datastore.CreateMarketOrderResult
	if rf, ok := ret.Get(0).(func(datastore.CreateMarketOrderParams) datastore.CreateMarketOrderResult); ok {
		r0 = rf(params)
	} else {
		r0 = ret.Get(0).(datastore.CreateMarketOrderResult)
	}

	var r1 []int32
	if rf, ok := ret.Get(1).(func(datastore.CreateMarketOrderParams) []int32); ok {
		r1 = rf(params)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]int32)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(datastore.CreateMarketOrderParams) error); ok {
		r2 = rf(params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ExecuteTx provides a mock function with given fields: transaction
func (_m *Store) ExecuteTx(transaction func(context.Context, queries.Querier) error) error {
	ret := _m.Called(transaction)

	var r0 error
	if rf, ok := ret.Get(0).(func(func(context.Context, queries.Querier) error) error); ok {
		r0 = rf(transaction)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccount provides a mock function with given fields: accountId
func (_m *Store) GetAccount(accountId int32) (*queries.Account, error) {
	ret := _m.Called(accountId)

	var r0 *queries.Account
	if rf, ok := ret.Get(0).(func(int32) *queries.Account); ok {
		r0 = rf(accountId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*queries.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(accountId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountByToken provides a mock function with given fields: token
func (_m *Store) GetAccountByToken(token string) (*queries.Account, error) {
	ret := _m.Called(token)

	var r0 *queries.Account
	if rf, ok := ret.Get(0).(func(string) *queries.Account); ok {
		r0 = rf(token)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*queries.Account)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStandingOrder provides a mock function with given fields: orderId
func (_m *Store) GetStandingOrder(orderId int32) (*queries.StandingOrder, error) {
	ret := _m.Called(orderId)

	var r0 *queries.StandingOrder
	if rf, ok := ret.Get(0).(func(int32) *queries.StandingOrder); ok {
		r0 = rf(orderId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*queries.StandingOrder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int32) error); ok {
		r1 = rf(orderId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStandingOrders provides a mock function with given fields: orderIds
func (_m *Store) GetStandingOrders(orderIds []int32) ([]queries.StandingOrder, error) {
	ret := _m.Called(orderIds)

	var r0 []queries.StandingOrder
	if rf, ok := ret.Get(0).(func([]int32) []queries.StandingOrder); ok {
		r0 = rf(orderIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]queries.StandingOrder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]int32) error); ok {
		r1 = rf(orderIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WithContext provides a mock function with given fields: ctx
func (_m *Store) WithContext(ctx context.Context) datastore.Store {
	ret := _m.Called(ctx)

	var r0 datastore.Store
	if rf, ok := ret.Get(0).(func(context.Context) datastore.Store); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(datastore.Store)
		}
	}

	return r0
}
