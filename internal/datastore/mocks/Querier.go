// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	context "context"

	queries "github.com/galcik/vlexchange/internal/datastore/queries"
	mock "github.com/stretchr/testify/mock"
)

// Querier is an autogenerated mock type for the Querier type
type Querier struct {
	mock.Mock
}

// CreateAccount provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateAccount(ctx context.Context, arg queries.CreateAccountParams) (queries.Account, error) {
	ret := _m.Called(ctx, arg)

	var r0 queries.Account
	if rf, ok := ret.Get(0).(func(context.Context, queries.CreateAccountParams) queries.Account); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(queries.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, queries.CreateAccountParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateStandingOrder provides a mock function with given fields: ctx, arg
func (_m *Querier) CreateStandingOrder(ctx context.Context, arg queries.CreateStandingOrderParams) (queries.StandingOrder, error) {
	ret := _m.Called(ctx, arg)

	var r0 queries.StandingOrder
	if rf, ok := ret.Get(0).(func(context.Context, queries.CreateStandingOrderParams) queries.StandingOrder); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(queries.StandingOrder)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, queries.CreateStandingOrderParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteStandingOrder provides a mock function with given fields: ctx, id
func (_m *Querier) DeleteStandingOrder(ctx context.Context, id int32) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int32) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccountById provides a mock function with given fields: ctx, id
func (_m *Querier) GetAccountById(ctx context.Context, id int32) (queries.Account, error) {
	ret := _m.Called(ctx, id)

	var r0 queries.Account
	if rf, ok := ret.Get(0).(func(context.Context, int32) queries.Account); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(queries.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAccountByToken provides a mock function with given fields: ctx, token
func (_m *Querier) GetAccountByToken(ctx context.Context, token string) (queries.Account, error) {
	ret := _m.Called(ctx, token)

	var r0 queries.Account
	if rf, ok := ret.Get(0).(func(context.Context, string) queries.Account); ok {
		r0 = rf(ctx, token)
	} else {
		r0 = ret.Get(0).(queries.Account)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBestBuyer provides a mock function with given fields: ctx, limitPrice
func (_m *Querier) GetBestBuyer(ctx context.Context, limitPrice int64) (queries.StandingOrder, error) {
	ret := _m.Called(ctx, limitPrice)

	var r0 queries.StandingOrder
	if rf, ok := ret.Get(0).(func(context.Context, int64) queries.StandingOrder); ok {
		r0 = rf(ctx, limitPrice)
	} else {
		r0 = ret.Get(0).(queries.StandingOrder)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, limitPrice)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBestMarketBuyer provides a mock function with given fields: ctx
func (_m *Querier) GetBestMarketBuyer(ctx context.Context) (queries.StandingOrder, error) {
	ret := _m.Called(ctx)

	var r0 queries.StandingOrder
	if rf, ok := ret.Get(0).(func(context.Context) queries.StandingOrder); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(queries.StandingOrder)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBestMarketSeller provides a mock function with given fields: ctx
func (_m *Querier) GetBestMarketSeller(ctx context.Context) (queries.StandingOrder, error) {
	ret := _m.Called(ctx)

	var r0 queries.StandingOrder
	if rf, ok := ret.Get(0).(func(context.Context) queries.StandingOrder); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(queries.StandingOrder)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBestSeller provides a mock function with given fields: ctx, limitPrice
func (_m *Querier) GetBestSeller(ctx context.Context, limitPrice int64) (queries.StandingOrder, error) {
	ret := _m.Called(ctx, limitPrice)

	var r0 queries.StandingOrder
	if rf, ok := ret.Get(0).(func(context.Context, int64) queries.StandingOrder); ok {
		r0 = rf(ctx, limitPrice)
	} else {
		r0 = ret.Get(0).(queries.StandingOrder)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, limitPrice)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReservedAmounts provides a mock function with given fields: ctx, accountID
func (_m *Querier) GetReservedAmounts(ctx context.Context, accountID int32) (queries.GetReservedAmountsRow, error) {
	ret := _m.Called(ctx, accountID)

	var r0 queries.GetReservedAmountsRow
	if rf, ok := ret.Get(0).(func(context.Context, int32) queries.GetReservedAmountsRow); ok {
		r0 = rf(ctx, accountID)
	} else {
		r0 = ret.Get(0).(queries.GetReservedAmountsRow)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, accountID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStandingOrder provides a mock function with given fields: ctx, id
func (_m *Querier) GetStandingOrder(ctx context.Context, id int32) (queries.StandingOrder, error) {
	ret := _m.Called(ctx, id)

	var r0 queries.StandingOrder
	if rf, ok := ret.Get(0).(func(context.Context, int32) queries.StandingOrder); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(queries.StandingOrder)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetStandingOrders provides a mock function with given fields: ctx, orderIds
func (_m *Querier) GetStandingOrders(ctx context.Context, orderIds []int32) ([]queries.StandingOrder, error) {
	ret := _m.Called(ctx, orderIds)

	var r0 []queries.StandingOrder
	if rf, ok := ret.Get(0).(func(context.Context, []int32) []queries.StandingOrder); ok {
		r0 = rf(ctx, orderIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]queries.StandingOrder)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, []int32) error); ok {
		r1 = rf(ctx, orderIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SatisfyOrder provides a mock function with given fields: ctx, arg
func (_m *Querier) SatisfyOrder(ctx context.Context, arg queries.SatisfyOrderParams) (queries.StandingOrder, error) {
	ret := _m.Called(ctx, arg)

	var r0 queries.StandingOrder
	if rf, ok := ret.Get(0).(func(context.Context, queries.SatisfyOrderParams) queries.StandingOrder); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(queries.StandingOrder)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, queries.SatisfyOrderParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TransferAmounts provides a mock function with given fields: ctx, arg
func (_m *Querier) TransferAmounts(ctx context.Context, arg queries.TransferAmountsParams) (int64, error) {
	ret := _m.Called(ctx, arg)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, queries.TransferAmountsParams) int64); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, queries.TransferAmountsParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
